/*
 * This file is generated by jOOQ.
 */
package br.com.ibasi.jooq.tables;


import br.com.ibasi.jooq.DefaultSchema;
import br.com.ibasi.jooq.Keys;
import br.com.ibasi.jooq.tables.Invoice.InvoicePath;
import br.com.ibasi.jooq.tables.Product.ProductPath;
import br.com.ibasi.jooq.tables.records.InvoiceItemRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class InvoiceItem extends TableImpl<InvoiceItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>invoice_item</code>
     */
    public static final InvoiceItem INVOICE_ITEM = new InvoiceItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvoiceItemRecord> getRecordType() {
        return InvoiceItemRecord.class;
    }

    /**
     * The column <code>invoice_item.id</code>.
     */
    public final TableField<InvoiceItemRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>invoice_item.quantity</code>.
     */
    public final TableField<InvoiceItemRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.DECIMAL(19, 4).nullable(false), this, "");

    /**
     * The column <code>invoice_item.unit_value</code>.
     */
    public final TableField<InvoiceItemRecord, BigDecimal> UNIT_VALUE = createField(DSL.name("unit_value"), SQLDataType.DECIMAL(19, 4).nullable(false), this, "");

    /**
     * The column <code>invoice_item.invoice_id</code>.
     */
    public final TableField<InvoiceItemRecord, Integer> INVOICE_ID = createField(DSL.name("invoice_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>invoice_item.product_id</code>.
     */
    public final TableField<InvoiceItemRecord, Integer> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private InvoiceItem(Name alias, Table<InvoiceItemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private InvoiceItem(Name alias, Table<InvoiceItemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>invoice_item</code> table reference
     */
    public InvoiceItem(String alias) {
        this(DSL.name(alias), INVOICE_ITEM);
    }

    /**
     * Create an aliased <code>invoice_item</code> table reference
     */
    public InvoiceItem(Name alias) {
        this(alias, INVOICE_ITEM);
    }

    /**
     * Create a <code>invoice_item</code> table reference
     */
    public InvoiceItem() {
        this(DSL.name("invoice_item"), null);
    }

    public <O extends Record> InvoiceItem(Table<O> path, ForeignKey<O, InvoiceItemRecord> childPath, InverseForeignKey<O, InvoiceItemRecord> parentPath) {
        super(path, childPath, parentPath, INVOICE_ITEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class InvoiceItemPath extends InvoiceItem implements Path<InvoiceItemRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> InvoiceItemPath(Table<O> path, ForeignKey<O, InvoiceItemRecord> childPath, InverseForeignKey<O, InvoiceItemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private InvoiceItemPath(Name alias, Table<InvoiceItemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public InvoiceItemPath as(String alias) {
            return new InvoiceItemPath(DSL.name(alias), this);
        }

        @Override
        public InvoiceItemPath as(Name alias) {
            return new InvoiceItemPath(alias, this);
        }

        @Override
        public InvoiceItemPath as(Table<?> alias) {
            return new InvoiceItemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<InvoiceItemRecord, Integer> getIdentity() {
        return (Identity<InvoiceItemRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<InvoiceItemRecord> getPrimaryKey() {
        return Keys.KEY_INVOICE_ITEM_PRIMARY;
    }

    @Override
    public List<ForeignKey<InvoiceItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_INVOICE_ITEM__INVOICE, Keys.FK_INVOICE_ITEM__PRODUCT);
    }

    private transient InvoicePath _invoice;

    /**
     * Get the implicit join path to the <code>quarkus-graphql.invoice</code>
     * table.
     */
    public InvoicePath invoice() {
        if (_invoice == null)
            _invoice = new InvoicePath(this, Keys.FK_INVOICE_ITEM__INVOICE, null);

        return _invoice;
    }

    private transient ProductPath _product;

    /**
     * Get the implicit join path to the <code>quarkus-graphql.product</code>
     * table.
     */
    public ProductPath product() {
        if (_product == null)
            _product = new ProductPath(this, Keys.FK_INVOICE_ITEM__PRODUCT, null);

        return _product;
    }

    @Override
    public InvoiceItem as(String alias) {
        return new InvoiceItem(DSL.name(alias), this);
    }

    @Override
    public InvoiceItem as(Name alias) {
        return new InvoiceItem(alias, this);
    }

    @Override
    public InvoiceItem as(Table<?> alias) {
        return new InvoiceItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InvoiceItem rename(String name) {
        return new InvoiceItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvoiceItem rename(Name name) {
        return new InvoiceItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvoiceItem rename(Table<?> name) {
        return new InvoiceItem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvoiceItem where(Condition condition) {
        return new InvoiceItem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvoiceItem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvoiceItem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvoiceItem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InvoiceItem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InvoiceItem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InvoiceItem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public InvoiceItem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvoiceItem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public InvoiceItem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
